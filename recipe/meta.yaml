{% set name = "cuda-nvtx" %}
{% set version = "12.0.76" %}
{% set cuda_version = "12.0" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvtx/{{ platform }}/cuda_nvtx-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: 1d2cbcb05a2e8a04b51a866b6997cb73ed90e61ffa183669d3f9ff7a0c7fd654  # [linux64]
  sha256: 2a8aef88030147cd0a394d6fe1ceb2d26aa9694aa751e10d58e39623f27cf7e2  # [ppc64le]
  sha256: 2cb31f10cf0e58d296611bac2bb6e2f9ccb498753bb148b487defbd95e11f3e8  # [aarch64]
  sha256: e16c1214fb7ae1bb60a9224e07b70aa5fd03310226140672ab3b409ddf4ae2a7  # [win]

build:
  number: 1
  skip: true  # [osx]

test:
  requires:
    # For readelf
    - binutils           # [linux]
  commands:
    - test -L $PREFIX/lib/libnvToolsExt.so.1                                # [linux]
    - test -f $PREFIX/lib/libnvToolsExt.so.1.0.0                            # [linux]
    - test -L $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so.1      # [linux]
    - test -L $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so.1.0.0  # [linux]
    - if `readelf -d /home/isuru/miniforge3/envs/nvtx/lib/libnvToolsExt.so.1 | grep -q '$ORIGIN/\.\.'`; then echo 1; fi  # [linux]

outputs:
  - name: cuda-nvtx
    build:
        skip: true  # [not linux]
    files:
      - lib/libnv*.so.*                       # [linux]
      - targets/{{ target_name }}/lib/*.so.*  # [linux]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    # Tests are defined at the top level, due to package/output name conflicts.
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: A C-based API for annotating events, code ranges, and resources
      description: |
        A C-based API for annotating events, code ranges, and resources in your
        applications. Applications which integrate NVTX can use the Visual Profiler
        to capture and visualize these events and ranges.
      doc_url: https://docs.nvidia.com/nvtx/

  - name: cuda-nvtx-dev
    build:
      run_exports:                                        # [linux]
        - {{ pin_subpackage("cuda-nvtx", max_pin='x') }}  # [linux]
    files:
      - lib/libnv*.so                                    # [linux]
      - lib/pkgconfig                                    # [linux]
      - targets/{{ target_name }}/lib/*.so               # [linux]
      - targets/{{ target_name }}/include/nvToolsExt*.h  # [linux]
      - targets/{{ target_name }}/include/nvtx3          # [linux]
      - Library\include\targets\{{ target_name }}        # [win]
    requirements:
      build:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("cuda-nvtx", exact=True) }}  # [linux]
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -L $PREFIX/lib/libnvToolsExt.so                                                      # [linux]
        - test -f $PREFIX/lib/pkgconfig/nvToolsExt*.pc                                              # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvToolsExtCuda.h                        # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvtx3/nvToolsExtCuda.h                  # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libnvToolsExt.so                            # [linux]
        - if not exist %LIBRARY_INC%\targets\{{ target_name }}\nvtx3\nvToolsExt.h exit 1  # [win]
    about:
      home: https://developer.nvidia.com/cuda-toolkit
      license_file: LICENSE
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: A C-based API for annotating events, code ranges, and resources
      description: |
        A C-based API for annotating events, code ranges, and resources in your
        applications. Applications which integrate NVTX can use the Visual Profiler
        to capture and visualize these events and ranges.
      doc_url: https://docs.nvidia.com/nvtx/

about:
  home: https://developer.nvidia.com/cuda-toolkit
  license_file: LICENSE
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: A C-based API for annotating events, code ranges, and resources
  description: |
    A C-based API for annotating events, code ranges, and resources in your
    applications. Applications which integrate NVTX can use the Visual Profiler
    to capture and visualize these events and ranges.
  doc_url: https://docs.nvidia.com/nvtx/

extra:
  recipe-maintainers:
    - adibbley
